#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
template <typename K> using hset = gp_hash_table<K, null_type>;
template <typename K, typename V> using hmap = gp_hash_table<K, V>;


using namespace std;

#define all(x) (x).begin(), (x).end()
#define pb push_back
#define eb emplace_back
#define smax(x, y) (x = max(x, y))
#define smin(x, y) (x = min(x, y))

using ll = long long;
using ld = long double;

template <typename T>
using vv = vector<vector<T>>;

using vi = vector<int>;
using ii = array<int, 2>;
using vii = vector<ii>;
using vvi = vv<int>;

using vll = vector<ll>;
using l2 = array<ll, 2>;
using vl2 = vector<l2>;
using vvll = vv<ll>;

template <typename T>
using minq = priority_queue<T, vector<T>, greater<T>>;
template <typename T>
using maxq = priority_queue<T>;

const ll M = 1000000007;

int x, y;

bool in_bounds(int top, int right, int h, int w) {
    return top - h >= 0 && right - w >= 0;
}


int solve(const vvi & g) {
    int R = g.size(), C = g[0].size();
    vvi p(R + 1, vi(C + 1));
    for (int r = 0; r < R; ++r) {
        for (int c = 0; c < C; ++c) {
            p[r + 1][c + 1] = p[r + 1][c] + p[r][c + 1] - p[r][c] + g[r][c];
        }
    }
    // cache above
    vi cache(R + 1);
    int res = 0;
    for (int r = 1; r <= R; ++r) { // go down from r
        cache[r] = cache[r - 1];
        for (int c = 1; c <= C; ++c) {
            if (in_bounds(r, c, x, y)) {
                int area = p[r][c] - p[r - x][c] - p[r][c - y] + p[r - x][c - y];
                smax(res, area + cache[r-x]);
                smax(cache[r], area);
            }
            if (in_bounds(r, c, y, x)) {
                int area = p[r][c] - p[r - y][c] - p[r][c - x] + p[r - y][c - x];
                smax(res, area + cache[r-y]);
                smax(cache[r], area);
            }
        }
    }

    return res;
}

vvi rotate(const vvi &g) {
    int R = g.size(), C = g[0].size();
    vvi ret(C, vi(R));
    for (int r = 0; r < R; ++r) {
        for (int c = 0; c < C; ++c) {
            ret[c][R-r-1] = g[r][c];
        }
    }
    return ret;
}


int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    int R, C;
    cin >> R >> C;
    cin >> x >> y;
    vvi g(R, vi(C));
    for (int r = 0; r < R; ++r) {
        for (int c = 0; c < C; ++c) {
            cin >> g[r][c];
        }
    }
    vector<vvi> gs{g};
    for (int i = 0; i < 3; ++i) {
        gs.pb(rotate(gs.back()));
    }
    vi anss;
    transform(all(gs), back_inserter(anss), solve);
    cout << *max_element(all(anss)) << '\n';
}
